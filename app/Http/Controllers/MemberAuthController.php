<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\MemberModel;
use App\Models\EmployeeModel;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator; //form validation
use Illuminate\Support\Facades\Storage;


class MemberAuthController extends Controller
{
    // üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Session
    private function updateMemberSession($member)
    {
        session([
            'mem_id'   => $member->mem_id,
            'mem_name' => $member->mem_name,
            'mem_pic'  => $member->mem_pic,
        ]);
    }

    // üìå ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    public function showRegisterForm()
    {
        return view('member.register');
    }

    // üìå ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    public function register(Request $request)
    {
        //msg
        $messages = [
            'mem_name.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            'mem_name.min' => '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ :min ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',

            'mem_username.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            'mem_username.unique' => '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥',
            'mem_username.min' => '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ :min ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',

            'mem_email.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            'mem_email.email' => '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            'mem_email.unique' => 'Email ‡∏ã‡πâ‡∏≥ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á  !!',

            'mem_password.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            'mem_password.min' => '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ :min ‡∏ï‡∏±‡∏ß',
            'mem_password.confirmed' => 'password not match!!',

            'mem_password_confirmation.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',

            'mem_password_confirmation.min' => '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ :min ‡∏ï‡∏±‡∏ß',

            'mem_phone.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            'mem_phone.min' => '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ :min',
            'mem_phone.max' => '‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô :max',

            'mem_gender.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',
            'mem_dob.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å',

            'mem_pic.mimes' => '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö jpeg, png, jpg ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô !!',
            'mem_pic.max' => '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô',
        ];

        $validator = Validator::make($request->all(), [
            'mem_name'      => 'required|string|max:100|min:3',
            'mem_username'  => 'required|string|max:100|min:2|unique:tbl_member',
            'mem_email'     => 'required|email|max:100|unique:tbl_member',
            'mem_phone'     => 'string|max:10|min:10',
            'mem_gender'    => 'nullable|string|max:10',
            'mem_dob'       => 'nullable|date',
            'mem_password'  => 'required|string|min:6|confirmed',
            'mem_password_confirmation'  => 'required|string|min:6',
            'mem_pic'       => 'nullable|image|mimes:jpg,jpeg,png,gif|max:2048',
        ], $messages);

        //check 
        if ($validator->fails()) {
            return redirect('member/register/')
                ->withErrors($validator)
                ->withInput();
        }


        
        try {
            $imagePath = null;
            if ($request->hasFile('mem_pic')) {
                $imagePath = $request->file('mem_pic')->store('uploads/member', 'public');

                // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
            $member = MemberModel::create([
                'mem_name'     => $request->mem_name,
                'mem_username' => $request->mem_username,
                'mem_email'    => $request->mem_email,
                'mem_phone'    => $request->mem_phone,
                'mem_gender'   => $request->mem_gender,
                'mem_dob'      => $request->mem_dob,
                'mem_password' => Hash::make($request->mem_password),
                'mem_pic'      => $imagePath,
                'point'        => 100,
            ]);

            // üîë ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            Auth::guard('member')->login($member);

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Session
            $this->updateMemberSession($member);

            // ‚úÖ ‡∏™‡πà‡∏á flash session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SweetAlert
            return redirect()->route('member.home')
                ->with('register_success', '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ');
            }

        } catch (\Exception $e) {  //error debug
            return response()->json(['error' => $e->getMessage()], 500); //‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
            // return view('errors.404');

            
        }
    }




    // üìå ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    public function showLoginForm()
    {
        return view('member.login');
    }


    // üìå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    public function login(Request $request)
    {
        $request->validate([
            'login'    => 'required|string|max:100',
            'password' => 'required|string|min:3',
        ]);

        $loginInput = $request->login;
        $password   = $request->password;

        // üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡πÄ‡∏õ‡πá‡∏ô email ‡∏´‡∏£‡∏∑‡∏≠ username
        $loginTypeMember   = filter_var($loginInput, FILTER_VALIDATE_EMAIL) ? 'mem_email' : 'mem_username';
        $loginTypeEmployee = filter_var($loginInput, FILTER_VALIDATE_EMAIL) ? 'emp_email' : 'emp_username';

        // üîé ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Member
        $member = \App\Models\MemberModel::where($loginTypeMember, $loginInput)->first();

        if ($member && Hash::check($password, $member->mem_password)) {
            Auth::guard('member')->login($member);

            session([
                'mem_id'   => $member->mem_id,
                'mem_name' => $member->mem_name,
                'mem_pic'  => $member->mem_pic,
                'role'     => 'member',
            ]);

            // ‚úÖ ‡∏™‡πà‡∏á flash session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SweetAlert
            return redirect()->route('member.home')
                ->with('login_success', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ');
        }

        // üîé ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‚Üí ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Employee
        $employee = \App\Models\EmployeeModel::where($loginTypeEmployee, $loginInput)->first();

        if ($employee && Hash::check($password, $employee->emp_password)) {
            Auth::guard('admin')->login($employee);

            session([
                'emp_id'       => $employee->emp_id,
                'emp_name'     => $employee->emp_name,
                'emp_username' => $employee->emp_username,
                'emp_email'    => $employee->emp_email,
                'emp_pic'      => $employee->emp_pic,
                'role'         => $employee->role, // admin ‡∏´‡∏£‡∏∑‡∏≠ staff
            ]);

            return redirect('/dashboard')
                ->with('login_success', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ');
        }

        // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á
        return back()->withErrors([
            'login' => '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        ]);
    }

    public function logout(Request $request)
    {
        // ‡∏ñ‡πâ‡∏≤ login ‡∏°‡∏≤‡∏à‡∏≤‡∏Å guard member
        if (Auth::guard('member')->check()) {
            Auth::guard('member')->logout();
            $request->session()->forget(['mem_id', 'mem_name', 'mem_pic', 'role']);
        }

        // ‡∏ñ‡πâ‡∏≤ login ‡∏°‡∏≤‡∏à‡∏≤‡∏Å guard admin (admin/staff)
        if (Auth::guard('admin')->check()) {
            Auth::guard('admin')->logout();
            $request->session()->forget(['emp_id', 'emp_name', 'emp_username', 'emp_email', 'emp_pic', 'role']);
        }

        // ‚úÖ clear session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå
        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect('/')->with('success', '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
}
